---
##############################
###### Software Section ######
##############################
- name: "Install additional packages"
  when: ansible_facts['pkg_mgr'] != "atomic_container"
  ansible.builtin.package:
    state: "present"
    name:
      - "autofs"
      - "bmon"
      - "ca-certificates"
      - "curl"
      - "git"
      - "gnupg"
      - "htop"
      - "iftop"
      - "lsb-release"
      - "lshw"
      - "{{ 'nfs-utils' if ansible_facts['pkg_mgr'] | lower == 'dnf' else 'nfs-common' }}"
      - "sudo"
      - "slurm"

##########################
###### User Section ######
##########################
- name: "Randomize ansible user password so only key authentication can be used"
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    password: "{{ lookup('password', '/dev/null length=32 seed=inventory_hostname') }}"
    password_lock: true

- name: "Configure User '{{ admin_user_name }}'"
  ansible.builtin.user:
    append: true
    groups: "{{ admin_user_groups }}"
    name: "{{ admin_user_name }}"
    # password: "{{ lookup('password', '../credentials/' + ansible_hostname + '/' + item.name + '/password.txt encrypt=md5_crypt') }}"
    shell: "/bin/bash"
    state: "present"
    uid: "{{ admin_user_uid }}"

- name: "Add keys for '{{ admin_user_name }}'"
  ansible.posix.authorized_key:
    key: "{{ item }}"
    path: "/home/{{ admin_user_name }}/{{ 'authorized_keys.d/ignition' if 'coreos' in group_names else 'authorized_keys' }}"
    state: "present"
    user: "{{ admin_user_name }}"
  loop: "{{ ssh_pub_keys }}"
  loop_control:
    label: "{{ item.split(' ', 2)[2] }}"

- name: "Remove revoked keys for '{{ admin_user_name }}'"
  ansible.posix.authorized_key:
    key: "{{ item }}"
    path: "/home/{{ admin_user_name }}/{{ 'authorized_keys.d/ignition' if 'coreos' in group_names else 'authorized_keys' }}"
    state: "absent"
    user: "{{ admin_user_name }}"
  loop: "{{ ssh_pub_keys_to_revoke }}"
  loop_control:
    label: "{{ item.split(' ', 2)[2] }}"

- name: "Check for oh-my-bash"
  ansible.builtin.shell:
    cmd: "set -o pipefail && find /usr/local/share/oh-my-bash -name oh-my-bash.sh | grep -q ."
    executable: "/bin/bash"
  changed_when: false
  failed_when: "oh_my_bash_installed.rc != 0 and 'No such file or directory' not in oh_my_bash_installed.stderr"
  register: oh_my_bash_installed

- name: "Download oh-my-bash installer"
  ansible.builtin.get_url:
    dest: "/tmp/oh-my-bash-install.sh"
    mode: 'u+rwx'
    url: "https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh"
  when: oh_my_bash_installed.rc != 0
  register: oh_my_bash_downloaded

- name: "Run oh-my-bash install script"
  ansible.builtin.shell: "/tmp/oh-my-bash-install.sh --prefix=/usr/local --unattended"
  when: oh_my_bash_downloaded.changed

- name: "Copy oh-my-bash .bashrc for '{{ admin_user_name }}'"
  ansible.builtin.template:
    dest: "/home/{{ admin_user_name }}/.bashrc"
    force: true
    group: "{{ admin_user_name }}"
    mode: "0644"
    owner: "{{ admin_user_name }}"
    src: "templates/bashrc.j2"

# This is not needed in Fedora CoreOS because a sodoers file exists making all sudo group passwordless
- name: "No sudo password for '{{ admin_user_name }}'"
  ansible.builtin.copy:
    content: "{{ admin_user_name }}  ALL=(ALL)  NOPASSWD: ALL"
    dest: "/etc/sudoers.d/{{ admin_user_name }}"
    mode: "0440"
  when:
    - ansible_facts['os_family'] != "RedHat" or
      ansible_facts['pkg_mgr'] != "atomic_container"

#########################
###### OCI Section ######
#########################
# OCI image gives a Ubuntu user that we only use to setup the Ansible user
- name: "SSH - Remove default SSH key"
  tags: ["oci", "never"]
  ansible.posix.authorized_key:
    user: "ubuntu"
    state: "absent"
    key: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIt6Xfre05KU/vnKTTN07E0qG9n2nLVwgZQ7xZdw8IOp Ansible - 01FEB2023"

- name: "SSH - Only listen on wg0 - Cloud Servers"
  tags: ["oci", "never"]
  ansible.builtin.replace:
    path: "/etc/ssh/sshd_config"
    regexp: '^(ListenAddress[ ]+)[^\n]+$'
    replace: '\g<1>{{ wg_ip }}'

- name: "SSH - Add wg0 as sshd dependency"
  tags: ["oci", "never"]
  ansible.builtin.blockinfile:
    block: |
      After=network.target wg-quick@wg0.service
      Requires=sys-devices-virtual-net-wg0.device
    insertafter: "\\[Unit\\]"
    path: "/etc/systemd/system/sshd.service"

#########################
###### SSH Section ######
#########################
- name: "Configure sshd"
  ansible.builtin.template:
    src: "templates/sshd_config.j2"
    dest: "/etc/ssh/sshd_config"
    mode: "0644"
    validate: '/usr/sbin/sshd -T -f %s'
  notify: "Reload sshd"
...
