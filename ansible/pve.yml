# Must add Ansible ssh key to root authorized_keys before running the playbook
# If running standalone or as cluster initiator, manually modify /etc/pve/storage.cfg for network storage
# If running the bootloader from a USB drive, pre-allocate the EFI as exactly 1.50 GB
# If running on a machine with Intel AMT, set the "nomodeset" kernel parameter at the PVE installer to force 800x600

---
- name: "Proxmox VE Setup"
  hosts: "pve"
  gather_facts: false

  vars_prompt:
    - name: "safe_to_reboot"
      private: false
      prompt: "Is this server safe to reboot when finished? [y/N]"

    - name: "root_password"
      private: true
      prompt: "Enter new root password (leave empty if not changing password)"

  handlers:
    - name: "Restart PVEproxy"
      ansible.builtin.systemd:
        name: "pveproxy.service"
        state: "reloaded"

    - name: "Refresh EFI config"
      ansible.builtin.command: "pve-efiboot-tool refresh"
      changed_when: false

    - name: "Enable and start Glances"
      ansible.builtin.systemd:
        enabled: true
        name: "glances"
        state: "started"

  pre_tasks:
    - name: "Preload Ansible SSH Key"
      tags: "always"
      ansible.builtin.import_tasks: "tasks/load_ssh_key.yml"

    # Gather facts now that we've loaded the SSH key
    - name: "Gathering Facts"
      tags: "always"
      ansible.builtin.setup:

  tasks:
    - name: "Find the USB EFI partition"
      ansible.builtin.set_fact:
        usb_efi_partition: >-
          {{
            ansible_devices
            | dict2items
            | selectattr('value.host', 'search', 'USB')
            | map(attribute='value.partitions')
            | map('dict2items')
            | flatten
            | selectattr('value.size', 'equalto', '1.50 GB')
            | list
          }}
      when: ansible_system_vendor == 'Supermicro'

    - name: "Fail if not exactly one USB EFI partition found"
      ansible.builtin.fail:
        msg: "Found {{ usb_efi_partition | length }} USB EFI partitions, expected exactly 1"
      when:
        - usb_efi_partition is defined
        - usb_efi_partition | length != 1

    - name: "Query pve-efiboot-tool to see if USB EFI drive is already loaded"
      ansible.builtin.command: "pve-efiboot-tool status"
      register: pve_boot_pre_status
      changed_when: false
      when: usb_efi_partition is defined

    - name: "Run pve-efiboot-tool to format the USB EFI drive"
      ansible.builtin.command: "pve-efiboot-tool format /dev/{{ usb_efi_partition[0].key }} --force"
      changed_when: true
      failed_when: "'Formatting' not in pve_boot_format.stdout"
      register: pve_boot_format
      when:
        - usb_efi_partition is defined
        - usb_efi_partition[0].value.uuid not in pve_boot_pre_status.stdout

    - name: "Run pve-efiboot-tool to initialize the USB EFI drive"
      ansible.builtin.command: "pve-efiboot-tool init /dev/{{ usb_efi_partition[0].key }}"
      changed_when: true
      failed_when: "'Configuring systemd-boot' not in pve_boot_init.stdout"
      register: pve_boot_init
      when:
        - usb_efi_partition is defined
        - usb_efi_partition[0].value.uuid not in pve_boot_pre_status.stdout

    - name: "Change root password"
      ansible.builtin.user:
        name: "root"
        password: "{{ root_password | password_hash('sha512') }}"
      no_log: true
      when: root_password != ""

    - name: "Disable PVE Subscription Repo and Ceph Enterprise Repo"
      ansible.builtin.apt_repository:
        repo: "{{ item }}"
        state: "absent"
        update_cache: false
      loop:
        - "deb https://enterprise.proxmox.com/debian/pve {{ ansible_distribution_release }} pve-enterprise"
        - "deb https://enterprise.proxmox.com/debian/ceph-quincy {{ ansible_distribution_release }} enterprise"

    - name: "Enable PVE and Ceph Free Repos"
      ansible.builtin.apt_repository:
        repo: "{{ item }}"
        state: "present"
        update_cache: false
      loop:
        - "deb http://download.proxmox.com/debian/pve {{ ansible_distribution_release }} pve-no-subscription"
        - "deb http://download.proxmox.com/debian/ceph-quincy {{ ansible_distribution_release }} no-subscription"

    - name: "Enable Intel firmware repo for MS-01 hardware"
      ansible.builtin.apt_repository:
        repo: "deb http://ftp.debian.org/debian {{ ansible_distribution_release }} main contrib non-free-firmware"
        state: "present"
        update_cache: false
      when: ansible_system_vendor == 'Micro Computer (HK) Tech Limited'

    - name: "Update apt cache and install some additional packages"
      ansible.builtin.apt:
        name:
          - "ifupdown2"
          - "ipmitool"
          - "lm-sensors"
          - "net-tools"
          - "python3-pip"
          - "python3-venv"
          - "tmux"
        update_cache: true

    - name: "Install intel-firmware for MS-01 hardware"
      ansible.builtin.apt:
        name: "intel-microcode"
      when: ansible_system_vendor == 'Micro Computer (HK) Tech Limited'

    - name: "Install glances using pip into venv /root/glances_venv"
      ansible.builtin.pip:
        name: "glances[all]"
        virtualenv: "/root/glances_venv"
        virtualenv_command: "/usr/bin/python3 -m venv"

    - name: "Create a systemd service for glances"
      ansible.builtin.copy:
        content: |
          [Unit]
          Description=Glances
          After=network.target

          [Service]
          ExecStart=/root/glances_venv/bin/glances -w --disable-webui
          Restart=on-abort
          RemainAfterExit=yes

          [Install]
          WantedBy=multi-user.target
        dest: "/etc/systemd/system/glances.service"
        mode: "0644"
      notify: "Enable and start Glances"

    - name: "Add authorized SSH keys"
      ansible.posix.authorized_key:
        key: "{{ item }}"
        state: "present"
        user: "root"
      loop: "{{ ssh_pub_keys }}"
      no_log: true

    - name: "Update LXC template database"
      ansible.builtin.command: "pveam update"
      register: pveam_status
      failed_when: "\"update successful\" not in pveam_status.stdout"
      changed_when: false

    - name: "Disable the \"No Subscription\" login popup"
      ansible.builtin.replace:
        backup: true
        path: "/usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js"
        regexp: >-
          (^\s+)(Ext.Msg.show\(\{\s+title:\s+gettext\('No valid subscription)
        replace: '\1void({ //\2'
      notify: "Restart PVEproxy"

    - name: "Rename the local-zfs pool"
      ansible.builtin.replace:
        backup: true
        path: "/etc/pve/storage.cfg"
        regexp: "local-zfs"
        replace: "VM-Local"

    - name: "Disable local ISO store"
      ansible.builtin.command: "pvesm set local -disable=1"
      changed_when: false

    - name: "Copy CoreOS auto-generate template"
      ansible.builtin.template:
        dest: "/etc/cron.weekly/pve-fcos-template"
        force: true
        mode: "0755"
        src: "{{ inventory_dir }}/templates/pve-fcos-template.sh.j2"
      when: "ansible_hostname == pve_primary_server"

    - name: "Blacklist devices intended for PCI passthrough"
      ansible.builtin.copy:
        content: |
          # LSI RAID controllers and HBAs
          # megaraid_sas is for SAS controllers with IR firmware (even in HBA mode)
          # mpt3sas is for SAS controllers with IT firmware
          blacklist megaraid_sas
          blacklist mpt3sas

          # AMD and Nvidia GPUs
          blacklist nouveau
          blacklist nvidia*
          blacklist radeon

          # TV Tuner
          blacklist cx23885

          # SATA Controllers
          blacklist ahci
        dest: "/etc/modprobe.d/blacklist.conf"
        mode: "0644"

    # Get network interfaces matching '^en[o,p,s]|^eth', append 'ansible_', and convert to variable
    - name: "Convert network interface names to ansible variables"
      ansible.builtin.set_fact:
        physical_interfaces: >-
          {{
            ['ansible_']
            | product(ansible_interfaces | select('match', '^en[o,p,s]|^eth'))
            | map('join')
            | map('extract', vars)
            | list
          }}
        reverse_sort: "{{ (ansible_system_vendor == 'Micro Computer (HK) Tech Limited') | ternary(true, false) }}"

    # Since the Minisforum PCs have the vPro interface on phc_index 1 instead of 0,
    #   we need to reverse sort their 1/2.5g interfaces to use the vPro NIC as PVE management
    - name: "Separate 1g and 10g interface variables"
      ansible.builtin.set_fact:
        gigabit_interfaces: >-
          {{
            physical_interfaces
            | selectattr('module', 'in', ['tg3', 'igb', 'e1000e', 'igc'])
            | sort(reverse=reverse_sort, attribute='phc_index')
            | list
          }}
        ten_gigabit_interfaces: >-
          {{
            physical_interfaces
            | selectattr('module', 'in', ['i40e', 'ixgbe'])
            | sort(attribute='phc_index')
            | list
          }}

    - name: "Disable IPv6"
      ansible.posix.sysctl:
        name: "net.ipv6.conf.all.disable_ipv6"
        value: "1"
        state: "present"
        sysctl_set: true

    - name: "Add kernel parameters to disable net.ifnames and biosdevname"
      ansible.builtin.lineinfile:
        backrefs: true
        line: "\\1 net.ifnames=0 biosdevname=0"
        path: "/etc/kernel/cmdline"
        regexp: '^(root(?!.*\bnet.ifnames=0 biosdevname=0\b).*)$'
        state: "present"
      notify: "Refresh EFI config"

    - name: "Add kernel parameter to add a little root delay"
      ansible.builtin.lineinfile:
        backrefs: true
        line: "\\1 rootdelay=5"
        path: "/etc/kernel/cmdline"
        regexp: '^(root(?!.*\brootdelay=5\b).*)$'
        state: "present"
      notify: "Refresh EFI config"

    - name: "Change network interface name(s) - 1g/2.5g"
      ansible.builtin.copy:
        content: |
          [Match]
          MACAddress={{ item.macaddress }}

          [Link]
          Name=eth0{{ idx + 1 }}
        dest: "/etc/systemd/network/0{{ idx + 1 }}-eth0{{ idx + 1 }}.link"
        mode: "0644"
      loop: "{{ gigabit_interfaces }}"
      loop_control:
        index_var: idx
        label: "{{ item.device }}"

    - name: "Change network interface name(s) - 10g"
      ansible.builtin.copy:
        content: |
          [Match]
          MACAddress={{ item.macaddress }}

          [Link]
          Name=eth{{ idx + 11 }}
        dest: "/etc/systemd/network/{{ idx + 11 }}-eth{{ idx + 11 }}.link"
        mode: "0644"
      loop: "{{ ten_gigabit_interfaces }}"
      loop_control:
        index_var: idx
        label: "{{ item.device }}"

    - name: "Setup etc/network/interfaces"
      ansible.builtin.copy:
        content: |
          auto lo
          iface lo inet loopback

          auto eth01
          iface eth01 inet static
            address {{ pve_servers | selectattr('name', 'equalto', inventory_hostname) | map(attribute='mgmt_ip') | first }}
            gateway {{ pve_servers | selectattr('name', 'equalto', inventory_hostname) | map(attribute='gateway') | first }}
          #1G PVE Management

          auto eth02
          iface eth02 inet manual

          auto vmbr0
          iface vmbr0 inet manual
            bridge-ports eth02
            bridge-stp off
            bridge-fd 0
            bridge-vlan-aware yes
            bridge-vids {{ vlan_list }}
          #1G VM Bridge

          auto eth11
          iface eth11 inet static
            address {{ pve_servers | selectattr('name', 'equalto', inventory_hostname) | map(attribute='storage_ip') | first }}
          #10G Storage

          auto eth12
          iface eth12 inet manual

          auto vmbr1
          iface vmbr1 inet manual
            bridge-ports eth12
            bridge-stp off
            bridge-fd 0
            bridge-vlan-aware yes
            bridge-vids {{ vlan_list }}
          #10G VM Bridge

          source /etc/network/interfaces.d/*
        dest: "/etc/network/interfaces"
        mode: "0644"

    - name: "Enable IOMMU"
      ansible.builtin.lineinfile:
        backrefs: true
        line: "\\1 intel_iommu=on iommu=pt"
        path: "/etc/kernel/cmdline"
        regexp: '^(root(?!.*\bintel_iommu=on iommu=pt\b).*)$'
        state: "present"
      notify: "Refresh EFI config"

    - name: "Run handlers in case we need to refresh EFI config"
      ansible.builtin.meta: "flush_handlers"

    # vfio_virqfd may not be needed in PVE 8, need to check on that
    - name: "Ensure VFIO kernel modules are loaded"
      ansible.builtin.lineinfile:
        line: "{{ item }}"
        path: "/etc/modules"
        state: "present"
      with_items:
        - "vfio"
        - "vfio_iommu_type1"
        - "vfio_pci"
        - "vfio_virqfd"

    - name: "Change swapiness to 0"
      ansible.posix.sysctl:
        name: "vm.swappiness"
        state: "present"
        value: "0"

    - name: "Reboot to activate IOMMU and apply updates"
      ansible.builtin.reboot:
      when: "\"y\" in safe_to_reboot | lower"

    - name: "Verify IOMMU is enabled"
      ansible.builtin.command: "dmesg"
      register: iommu_active_status
      changed_when: false

    - name: "Fail if IOMMU is not enabled"
      ansible.builtin.fail:
        msg: "IOMMU does not appear to be active"
      when: ("IOMMU enabled" not in iommu_active_status.stdout) or
            ("Enabled IRQ remapping" not in iommu_active_status.stdout)

  post_tasks:
    - name: "Unload Ansible SSH Key"
      tags: always
      ansible.builtin.import_tasks: "tasks/unload_ssh_key.yml"
...
