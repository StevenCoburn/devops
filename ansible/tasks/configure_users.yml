---
- name: "Users - Configure User '{{ admin_user.name }}'"
  ansible.builtin.user:
    groups: "{{ admin_user.groups }}"
    name: "{{ admin_user.name }}"
    # password: "{{ lookup('password', '../credentials/' + ansible_hostname + '/' + item.name + '/password.txt encrypt=md5_crypt') }}"
    shell: "/bin/bash"
    state: "present"
    uid: "{{ admin_user.uid }}"

- name: "Users - Add keys for '{{ admin_user.name }}'"
  ansible.posix.authorized_key:
    key: "{{ item }}"
    state: "present"
    user: "{{ admin_user.name }}"
  loop: "{{ ssh_pub_keys }}"
  no_log: true

- name: "Users - Remove revoked keys for '{{ admin_user.name }}'"
  ansible.posix.authorized_key:
    key: "{{ item }}"
    state: "absent"
    user: "{{ admin_user.name }}"
  loop: "{{ ssh_pub_keys_to_revoke }}"
  no_log: true

- name: "Users - Check for oh-my-bash"
  ansible.builtin.shell: "find /usr/local/share/oh-my-bash -name oh-my-bash.sh | grep -q ."
  changed_when: false
  failed_when: "oh_my_bash_installed.rc != 0 and 'No such file or directory' not in oh_my_bash_installed.stderr"
  register: oh_my_bash_installed

- name: "Users - Download oh-my-bash installer"
  ansible.builtin.get_url:
    dest: "/tmp/oh-my-bash-install.sh"
    mode: 'u+rwx'
    url: "https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh"
  when: oh_my_bash_installed.rc != 0
  register: oh_my_bash_downloaded

- name: "Users - Run oh-my-bash install script"
  ansible.builtin.shell: "/tmp/oh-my-bash-install.sh --prefix=/usr/local --unattended"
  when: oh_my_bash_downloaded.changed

- name: "Users - Remove the oh-my-bash installer"
  ansible.builtin.file:
    path: "/tmp/oh-my-bash-install.sh"
    state: "absent"

- name: "Users - Copy oh-my-bash .bashrc for '{{ admin_user.name }}'"
  ansible.builtin.template: 
    dest: "/home/{{ admin_user.name }}/.bashrc"
    force: true
    group: "{{ admin_user.name }}"
    owner: "{{ admin_user.name }}"
    src: "../templates/bashrc.j2"

# This is not needed in Fedora CoreOS because a sodoers file exists making all sudo group passwordless
- name: "Users - No sudo password for '{{ admin_user.name }}'"
  ansible.builtin.copy:
    content: "{{ admin_user.name }}  ALL=(ALL)  NOPASSWD: ALL"
    dest: "/etc/sudoers.d/{{ admin_user.name }}"
  when:
    - ansible_facts['os_family'] != "RedHat" or
      ansible_facts['pkg_mgr'] != "atomic_container"
...